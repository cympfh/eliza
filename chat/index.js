// Generated by CoffeeScript 1.7.1
(function() {
  var abs, chat, exec, log, max, min, pop_or_push, ptw, random, round;

  ptw = [];

  random = Math.random, round = Math.round, log = Math.log, abs = Math.abs, min = Math.min, max = Math.max;

  exec = require('child_process').exec;

  pop_or_push = function(text, cont, debug) {
    var p, popp, prob_pop, prob_push, pushable, pushp, shuffle;
    if (debug == null) {
      debug = false;
    }
    prob_push = function() {
      var len;
      if (debug) {
        return 0.8;
      }
      len = ptw.length;
      if (len < 30) {
        return 0.1;
      } else {
        return 3 / len;
      }
    };
    pushp = function() {
      return (random()) < (prob_push());
    };
    prob_pop = function() {
      var gen, h, t;
      if (debug && ptw.length > 3) {
        return 0.7;
      }
      if (ptw.length < 30) {
        return 0;
      }
      gen = 0.04;
      h = (new Date).getHours();
      t = abs(h - 2);
      switch (false) {
        case !(t < 2):
          return gen;
        case !(t < 12):
          return gen * 0.6;
        default:
          return gen * 0.3;
      }
    };
    popp = function() {
      return (random()) < (prob_pop());
    };
    shuffle = function(t) {
      var i, j, j1, j2, k, k1, k2, _i;
      t = t.slice(0, 20);
      j = 2 + (random()) * 2 | 0;
      for (i = _i = 0; 0 <= j ? _i < j : _i > j; i = 0 <= j ? ++_i : --_i) {
        switch (false) {
          case i % 2 !== 1:
            k1 = (random()) * t.length | 0;
            k2 = (random()) * t.length | 0;
            if (k1 === k2) {
              continue;
            }
            j1 = min(k1, k2);
            j2 = max(k1, k2);
            t = t.slice(j2, t.length) + t.slice(j1, j2) + t.slice(0, j1);
            break;
          default:
            k = (random()) * t.length | 0;
            t = t.slice(k, t.length) + t.slice(0, k);
        }
      }
      return t;
    };
    pushable = function(text) {
      var contain;
      contain = function(sub) {
        return (text.indexOf(sub)) !== -1;
      };
      if (contain('RT')) {
        return false;
      }
      if (contain('@')) {
        return false;
      }
      if (contain('#')) {
        return false;
      }
      if (contain('ttp')) {
        return false;
      }
      return true;
    };
    switch (false) {
      case !popp():
        p = (ptw.shift()) + (ptw.shift());
        console.warn("# chat.pop " + p);
        return cont(p);
      case !((pushable(text)) && (pushp())):
        ptw.push(text);
        return console.warn("# ptw length is " + ptw.length);
    }
  };


  /*
      else
        console.warn "# do nothing: 参考値: #{ptw.length} #{do prob_pop} #{do prob_push}"
   */

  chat = function(text, cont) {
    var chat1, chat3;
    chat1 = function(cont) {
      var a, i, last, n, p, _i;
      n = round(log((random()) * 100 + 2));
      p = 1 / 4;
      a = [round(random())];
      for (i = _i = 1; 1 <= n ? _i <= n : _i >= n; i = 1 <= n ? ++_i : --_i) {
        last = a[a.length - 1];
        a.push((random()) < p ? 1 - last : last);
      }
      return a.map(function(x) {
        if (x === 0) {
          return '！';
        } else {
          return '？';
        }
      }).join('');
    };
    chat3 = function(text, cont) {
      text = text.replace(/"/g, '').replace(/'/g, '');
      return exec("echo \"" + text + "\" | mecab", function(er, ls) {
        var n, nouns, suf, sufs;
        nouns = ls.split('\n').filter(function(l) {
          return (l.indexOf('\t名詞')) > 0;
        }).map(function(l) {
          return (l.split('\t'))[0];
        });
        if (nouns.length === 0) {
          return cont(null);
        }
        n = nouns.reduce(function(x, y) {
          if (x.length > y.length) {
            return x;
          } else {
            return y;
          }
        });
        sufs = ['？', '...???', 'ね'];
        suf = sufs[sufs.length * (random()) | 0];
        cont(n + suf);
      });
    };
    if ((ptw.length > 5) && ((random()) < 0.7)) {
      return cont(ptw.shift());
    } else {
      return chat3(text, function(r) {
        if (r === null) {
          r = chat1();
        }
        return cont(r);
      });
    }
  };

  exports.pop_or_push = pop_or_push;

  exports.reply = chat;

}).call(this);
