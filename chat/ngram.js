// Generated by CoffeeScript 1.8.0
(function() {
  var N, choose, fs, gram, load, make, model_path, ngram, table, train, train_path, warn, __BOS__, __EOS__;

  fs = require('fs');

  ngram = (require('nltk')).ngram;

  warn = console.warn;

  train_path = './ngram/train.txt';

  model_path = './ngram/model.json';

  __BOS__ = true;

  __EOS__ = false;

  N = 5;

  gram = new ngram(N);

  table = {};

  train = function(path, model) {
    var add_table, datum;
    add_table = function(datum) {
      return datum.forEach(function(d) {
        var key, val;
        key = d.slice(0, -1).join('');
        val = d[d.length - 1];
        if (table[key]) {
          if (table[key][val]) {
            return ++table[key][val];
          } else {
            return table[key][val] = 1;
          }
        } else {
          table[key] = {};
          return table[key][val] = 1;
        }
      });
    };
    datum = fs.readFileSync(path, 'utf8').split('\n').slice(0, -1).map((function(l) {
      var i;
      return ((function() {
        var _i, _results;
        _results = [];
        for (i = _i = 2; 2 <= N ? _i <= N : _i >= N; i = 2 <= N ? ++_i : --_i) {
          _results.push(__BOS__);
        }
        return _results;
      })()).concat((l.split('')).concat([__EOS__]));
    }));
    datum.forEach(function(d) {
      return add_table(gram["enum"](d));
    });
    return fs.writeFile(model, JSON.stringify(table), (function() {
      return warn("DONE TRAIN");
    }));
  };

  load = function(path) {
    table = require(path);
    return warn("DONE LOAD");
  };

  make = function() {
    var i, pr, prod, sen, threshold, u, v, _ref;
    sen = [];
    u = (function() {
      var _i, _results;
      _results = [];
      for (i = _i = 2; 2 <= N ? _i <= N : _i >= N; i = 2 <= N ? ++_i : --_i) {
        _results.push(true);
      }
      return _results;
    })();
    prod = 1;
    threshold = 0.0000032;
    threshold = 0.00000000032;
    while (true) {
      _ref = choose(table[u.join('')]), v = _ref[0], pr = _ref[1];
      prod *= pr;
      u = u.concat([v]);
      u = u.slice(-N + 1);
      if (!v || v === __EOS__.toString()) {
        break;
      }
      sen.push(v);
    }
    sen = sen.join('');
    if (prod < threshold || sen.length < 5) {
      return make();
    } else {
      return sen;
    }
  };

  choose = function(subt) {
    var count, r, tar, total;
    total = 0;
    for (tar in subt) {
      count = subt[tar];
      total += count;
    }
    r = Math.random() * total;
    for (tar in subt) {
      count = subt[tar];
      r -= count;
      if (r < 0) {
        return [tar, count / total];
      }
    }
  };

  module.exports = {
    make: make,
    load: load,
    train: train,
    model_path: model_path,
    train_path: train_path
  };

}).call(this);
